/* ==========================================================================
   #Site Grid Sizes
   ========================================================================== */



/*-----------------------------------*\

  $TOAST-GRID

  An insane grid.
  You'd be mad to use it.

  Usage
  =====

  Assuming default values:

  <div class="grid-wrap">
    <div class="column column--1-of-2">
      A half-width column.
    </div>
    <div class="column column--1-of-4 column--pull-1-of-4">
      A quarter, pulled left by its own width. You get this, right?
    </div>
  </div>


  Customisation
  =============

  $toast-grid-namespace and $toast-column-namespace
  adjusts the class names for the grid. With
  default values, grid wrappers have a class
  of '.grid' and columns '.column'.

  $toast-col-groups(n) adjusts column divisions.
  For example, $toast-col-groups(12) will produce
  a 12-column grid. $col-groups(3,6,8)
  will produce a 3-, 6-, and 8-column grid.

  $toast-gutter-width is—you guessed it—the gutter
  width. Accepts any unit.

  That's it. Have fun.

\*-----------------------------------*/

// Namespaces
// This stops me from being overzealous with enforcing classes
$toast-grid-namespace: "grid-wrap" !default;
$toast-column-namespace: "column" !default;

// $col-groups are the column groups you want
// For example, $col-groups: (3, 4, 5) will output:
// .column--n-of-3, .column--n-of-4, [...]
$toast-col-groups: (2, 3, 4, 5, 6, 8, 12) !default;

// Gutter width



// Breakpoints
$toast-breakpoint-medium: 700px !default;
$toast-breakpoint-small: 480px !default;

// Pushes and pulls
$toast-pushes: true !default;
$toast-pulls: true !default;

.#{$toast-grid-namespace} {
  list-style: none;
  margin-left: -$toast-gutter-width;
}

%span-all       { width: percentage(1/1); }

%one-half       { width: percentage(1/2); }

%one-third      { width: percentage(1/3); }
%two-thirds     { width: percentage(2/3); }

%one-quarter    { width: percentage(1/4); }
%two-quarters   { width: percentage(2/4); }
%three-quarters { width: percentage(3/4); }



// For each of our column groups...
@each $group in $toast-col-groups {

  // For each column width from 1 to the column group...
  @for $i from 1 through $group {
    .#{$toast-column-namespace}--#{$i}-of-#{$group} {
      @if percentage($i/$group) == percentage(1/1) {
        @extend %span-all;
      } @else if percentage($i/$group) == percentage(1/2) {
        @extend %one-half;
      } @else if percentage($i/$group) == percentage(1/3) {
        @extend %one-third;
      } @else if percentage($i/$group) == percentage(2/3) {
        @extend %two-thirds;
      } @else if percentage($i/$group) == percentage(1/4) {
        @extend %one-quarter;
      } @else if percentage($i/$group) == percentage(2/4) {
        @extend %two-quarters;
      } @else if percentage($i/$group) == percentage(3/4) {
        @extend %three-quarters;
      } @else {

        width: percentage($i/$group);

      }
    }

  } // end @for

} // end @each




// All direct descendents of .grid get treated the same way.
// This might be overkill for some, but it's a time-saver for me.
.#{$toast-column-namespace} {
  
	
	@include mq($until:tablet) {
		width: auto;
	}


 @include mq(wide) {
   
    &.#{$toast-column-namespace}--extralarge-4-of-4,
    &.#{$toast-column-namespace}--extralarge-3-of-3,
    &.#{$toast-column-namespace}--extralarge-2-of-2 {
      width: percentage(1);
      
      &.column.grid-small-full .side-bar-pull_inside{
      	margin-left: 0;
      }
    }
    
    &.#{$toast-column-namespace}--extralarge-1-of-2 {
      width: percentage(1/2);
    }

    &.#{$toast-column-namespace}--extralarge-1-of-3 {
      width: percentage(1/3);
    }

    &.#{$toast-column-namespace}--extralarge-2-of-3 {
      width: percentage(2/3);
    }

    &.#{$toast-column-namespace}--extralarge-1-of-4 {
      width: percentage(1/4);
    }

    &.#{$toast-column-namespace}--extralarge-2-of-4 {
      @extend .#{$toast-column-namespace}--extralarge-1-of-2;
    }

    &.#{$toast-column-namespace}--extralarge-3-of-4 {
      width: percentage(3/4);
    }
  }	
	


 @include mq($from: desktop, $until: wide) {
   
    &.#{$toast-column-namespace}--large-4-of-4,
    &.#{$toast-column-namespace}--large-3-of-3,
    &.#{$toast-column-namespace}--large-2-of-2 {
      width: percentage(1);
      
      &.column.grid-small-full .side-bar-pull_inside{
      	margin-left: 0;
      }
    }
    
    &.#{$toast-column-namespace}--large-1-of-2 {
      width: percentage(1/2);
    }

    &.#{$toast-column-namespace}--large-1-of-3 {
      width: percentage(1/3);
    }

    &.#{$toast-column-namespace}--large-2-of-3 {
      width: percentage(2/3);
    }

    &.#{$toast-column-namespace}--large-1-of-4 {
      width: percentage(1/4);
    }

    &.#{$toast-column-namespace}--large-2-of-4 {
      @extend .#{$toast-column-namespace}--large-1-of-2;
    }

    &.#{$toast-column-namespace}--large-3-of-4 {
      width: percentage(3/4);
    }
  }	
	
	
	
	
  @include mq($from: tablet, $until: desktop) {
   
    &.#{$toast-column-namespace}--medium-4-of-4,
    &.#{$toast-column-namespace}--medium-3-of-3,
    &.#{$toast-column-namespace}--medium-2-of-2 {
      width: percentage(1);
      
      &.column.grid-small-full .side-bar-pull_inside{
      	margin-left: 0;
      }
    }
    
    &.#{$toast-column-namespace}--medium-1-of-2 {
      width: percentage(1/2);
    }

    &.#{$toast-column-namespace}--medium-1-of-3 {
      width: percentage(1/3);
    }

    &.#{$toast-column-namespace}--medium-2-of-3 {
      width: percentage(2/3);
    }

    &.#{$toast-column-namespace}--medium-1-of-4 {
      width: percentage(1/4);
    }

    &.#{$toast-column-namespace}--medium-2-of-4 {
      @extend .#{$toast-column-namespace}--medium-1-of-2;
    }

    &.#{$toast-column-namespace}--medium-3-of-4 {
      width: percentage(3/4);
    }
  }


 @include mq($from: mobileLandscape, $until: tablet) {
    &[class*="#{$toast-column-namespace}--small-"] {
      display: inline-block;
      margin-right: -.24em;
    }
    
    &.#{$toast-column-namespace}--small-4-of-4,
    &.#{$toast-column-namespace}--small-3-of-3,
    &.#{$toast-column-namespace}--small-2-of-2 {
      width: percentage(1);
      
      &.column.grid-small-full .side-bar-pull_inside{
      	margin-left: 0;
      }
    }
    
    
    &.#{$toast-column-namespace}--small-1-of-2 {
      width: percentage(1/2);
    }

    &.#{$toast-column-namespace}--small-1-of-3 {
      width: percentage(1/3);
    }

    &.#{$toast-column-namespace}--small-2-of-3 {
      width: percentage(2/3);
    }

    &.#{$toast-column-namespace}--small-1-of-4 {
      width: percentage(1/4);
    }

    &.#{$toast-column-namespace}--small-2-of-4 {
      @extend .#{$toast-column-namespace}--small-1-of-2;
    }

    &.#{$toast-column-namespace}--small-3-of-4 {
      width: percentage(3/4);
    }
  }
  
  
  
  
  
}


/* Layout Columns
   ===========================================================*/



.columns {
  margin-left: -$desktop-side-pad;
  margin-right: -$desktop-side-pad;
  /*margin-top: -$desktop-side-pad;*/
  
  @include mq(tablet) {
  	@include flexbox;
  }
  
  
}


.columns:last-child {
  margin-bottom: -$desktop-side-pad;
}




.columns:not(:last-child) {
  margin-bottom: calc($desktop-side-pad * 2 - $desktop-side-pad);
}




.columns.is-centered {
	@include justify-content(center);
    @include flex-direction(column);
          
}



.columns.is-gapless {
  margin-left: 0;
  margin-right: 0;
  margin-top: 0;
}


.columns.is-gapless > .column {
  margin: 0;
  padding: 0 !important;
}

.columns.is-gapless:not(:last-child) {
  margin-bottom: $desktop-side-pad * 2;
}

.columns.is-gapless:last-child {
  margin-bottom: 0;
}



.columns.is-multiline {
  @include flex-wrap(wrap);
  @include flexbox;
 
   
}

.columns.is-vstart {
   @include align-items(flex-start);
}

.columns.is-vcentered {
   @include align-items(center);
}

.columns.is-vlast {
   @include align-items(flex-end);
}


.column {
  display: block;
  @include flex-basis(0);
  @include flex-grow(1);
  @include flex-shrink(1);
  padding: $desktop-side-pad $desktop-side-pad;
}

.columns.is-multiline > .column{

 @include flex(none);
 
   
}

/*Full Bleed Right/Left Hand Column*/


@include mq(tablet) {

	.side-bar-pull {
		position: relative;
		height: calc(100% + #{$desktop-side-pad} + #{$desktop-side-pad});
		padding: 0 0 0 $desktop-side-pad;
	}
	
	
	/*Left Hand Side*/
	
	.side-bar-pull_left .side-bar-pull_inside{
		margin-top: -$desktop-side-pad;
		margin-left: -$desktop-side-pad;
		margin-right: $desktop-side-pad;
		
	}
	
	
	/*Right Hand Side*/
	
	.side-bar-pull_right .side-bar-pull_inside{

		/*margin-top: -$desktop-side-pad;*/

	}
	
	.side-bar-pull_right .side-bar-pull_inside{
	
		/*margin-top: -$desktop-side-pad;*/
	
	}
	
	.side-bar-pull_inside {
		padding: $desktop-side-pad;
	}
}


/*Make Columns Full Width On Mobile*/

@include mq($until: desktop) {
	
	.side-bar-pull.side-bar-pull_right.grid-small-full {
		padding: 0;
	}
	
	.column.grid-small-full .side-bar-pull_inside{

		padding: $desktop-side-pad;
	}


}




/*Level Elements*/


.level-elements {
	@include align-items(center);
	@include justify-content(space-between);

}

.level-left,
.level-right {
	@include flex-basis(auto);
	@include flex-grow(0);
	@include flex-shrink(0);
	
}

.level-row {
	@include flex-direction(row);
	
}


.level-column {
	@include flex-direction(column);
	
}


@include mq(tablet) {
	
	.level-elements {
		@include flexbox;
		
	}
	
	.level-left,
	.level-right {
		@include flexbox;
	}
	
	.level-left {
	  @include align-items(flex-start);
	  @include justify-content(flex-start);
	  
	}
	
	.level-right {
		@include align-items(flex-end);
		@include justify-content(flex-end);
		 margin-left: auto;
	          
	}

}
